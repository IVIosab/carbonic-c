%language "C++"
%skeleton "lalr1.cc"
%require "3.2"

%define api.value.type variant
%define api.token.constructor
%define parse.assert
%define parse.error detailed
%define api.parser.class { Parser }
%define api.namespace    { carbonic_c }

%lex-param   { carbonic_c::Lexer &lexer }
%lex-param   { carbonic_c::Driver &driver }
%parse-param { carbonic_c::Lexer &lexer }
%parse-param { carbonic_c::Driver &driver }

/*Varaibles*/
%token TK_VAR TK_IS
/*Types*/
%token TK_TYPE TK_INTEGER TK_REAL TK_BOOLEAN TK_ARRAY TK_RECORD
/*Routines*/
%token TK_ROUTINE
/*Loops*/
%token TK_WHILE TK_LOOP TK_FOR TK_END TK_FROM TK_IN TK_REVERSE TK_DDOT
/*If*/
%token TK_IF TK_THEN TK_ELSE
/*Return*/
%token TK_RETURN
/*Assignment*/
%token TK_ASSIGN
/*Print*/
%token TK_PRINT
/*Comparison*/
%token TK_EQ TK_NEQ TK_LT TK_LEQ TK_GT TK_GEQ
/*Operators*/
%token TK_PLUS TK_MINUS TK_MUL TK_DIV TK_MOD TK_AND TK_OR TK_XOR
/*Variables*/
%token TK_IDENTIFIER TK_DOT
/*Literals*/
%token TK_REAL_LITERAL TK_BOOLEAN_LITERAL TK_INTEGER_LITERAL
/*Utils*/
%token TK_LPAREN TK_RPAREN TK_LSQUARE TK_RSQUARE TK_COMMA TK_COLON TK_SEMICOLON

/**/
%left TK_OR
%left TK_AND
%left TK_EQ TK_NEQ TK_XOR
%left TK_LT TK_LEQ TK_GT TK_GEQ
%left TK_PLUS TK_MINUS
%left TK_MUL TK_DIV TK_MOD

%type <ast::Integer> TK_INTEGER_LITERAL
%type <ast::Real> TK_REAL_LITERAL
%type <ast::Boolean> TK_BOOLEAN_LITERAL
%type <ast::Ident> TK_IDENTIFIER

%type <ast::Program*> PROGRAM;
%type <ast::Decl*> DECLARATION;
%type <ast::RoutineDecl*> ROUTINE_DECL;
%type <ast::GlobalVarDecl*> GLOBAL_VAR_DECL;
%type <ast::Expr*> EXPR;
%type <ast::ExprList*> EXPR_LIST;
%type <ast::BinaryExpr*> BINARY;
%type <ast::LogicExpr*> LOGIC;
%type <ast::ComparisonExpr*> COMPARISON;
%type <ast::Value*> VALUE;
/* %type <ast::IntegerValue*> INTEGER_VALUE;
%type <ast::RealValue*> REAL_VALUE;
%type <ast::BooleanValue*> BOOLEAN_VALUE; */
%type <ast::Var*> VAR;
%type <ast::RoutineCallValue*> ROUTINE_CALL_VALUE;
%type <ast::TypeDecl*> TYPE_DECL;
%type <ast::Type*> TYPE;
%type <ast::PrimitiveType*> PRIMITIVE_TYPE;
%type <ast::UserType*> USER_TYPE;
%type <ast::TypeIdentifier*> TYPE_IDENTIFIER;
/* %type <ast::IntegerType*> INTEGER_TYPE;
%type <ast::RealType*> REAL_TYPE;
%type <ast::BooleanType*> BOOLEAN_TYPE; */
%type <ast::ArrayType*> ARRAY_TYPE;
%type <ast::RecordType*> RECORD_TYPE;
%type <ast::ParameterDecl*> PARAMETER_DECL;
%type <ast::ParameterList*> PARAMETER_LIST;
%type <ast::Body*> BODY;
%type <ast::BodyEntity*> BODY_ENTITY;
%type <ast::LocalVarDecl*> LOCAL_VAR_DECL;
%type <ast::Statement*> STATEMENT;
%type <ast::Assignment*> ASSIGNMENT;
%type <ast::RoutineCall*> ROUTINE_CALL;
%type <ast::Return*> RETURN;
%type <ast::Print*> PRINT;
%type <ast::WhileLoop*> WHILE_LOOP;
%type <ast::ForLoop*> FOR_LOOP;
%type <ast::Range*> RANGE;
%type <ast::If*> IF;
/* %type <ast::NestedAccess*> NESTED_ACCESS; */
%type <ast::NestedAccessList*> NESTED_ACCESS_LIST;
%type <ast::ArrayAccess*> ARRAY_ACCESS;
%type <ast::RecordAccess*> RECORD_ACCESS;
%type <ast::LocalVarList*> LOCAL_VAR_LIST;

%code requires {
    #include <iostream>
    #include <string>
    #include <vector>
    #include <variant>
    #include <algorithm>
    #include "ast.hpp"
    #include "Enums.h"
    namespace carbonic_c {
    class Lexer;
    class Driver;
    }
}

%code top {
    #include <variant>
    #include "lexer.h"
    #include "driver.hpp"
    static carbonic_c::Parser::symbol_type yylex( carbonic_c::Lexer &lexer , carbonic_c::Driver &driver) {
        return lexer.get_next_token();
    }
    
    ast::Program *program = new ast::Program(std::vector<ast::Decl*>());  // Points to the whole program node.
    //extern int yylineno;
}

%start PROGRAM
%%
PROGRAM:
    %empty {}
    | PROGRAM DECLARATION {  program->decls.push_back($2); }
    ;
DECLARATION:
    TYPE_DECL { $$ = $1; }
    | GLOBAL_VAR_DECL { $$ = $1; }
    | ROUTINE_DECL { $$ = $1; }
    ;
ROUTINE_DECL:
    TK_ROUTINE TK_IDENTIFIER TK_LPAREN PARAMETER_LIST TK_RPAREN TK_COLON TYPE TK_IS BODY TK_END { $$ = new ast::RoutineDecl($2, $4, $7, $9); }
    | TK_ROUTINE TK_IDENTIFIER TK_LPAREN PARAMETER_LIST TK_RPAREN TK_IS BODY TK_END { $$ = new ast::RoutineDecl($2, $4, nullptr, $7); }
    | TK_ROUTINE TK_IDENTIFIER TK_LPAREN TK_RPAREN TK_COLON TYPE TK_IS BODY TK_END { $$ = new ast::RoutineDecl($2, nullptr, $6, $8); }
    | TK_ROUTINE TK_IDENTIFIER TK_LPAREN TK_RPAREN TK_IS BODY TK_END { $$ = new ast::RoutineDecl($2, nullptr, nullptr, $6); }
    ;
PARAMETER_LIST:
    PARAMETER_DECL { $$ = new ast::ParameterList(std::vector<ast::ParameterDecl *>()); $$->decls.push_back($1); }
    | PARAMETER_LIST TK_COMMA PARAMETER_DECL{ $1->decls.push_back($3); $$ = $1; }
    ;
PARAMETER_DECL:
    TK_IDENTIFIER TK_COLON TYPE{ $$ = new ast::ParameterDecl($1, $3); }
    ;
BODY:
    %empty { $$ = new ast::Body(std::vector<ast::BodyEntity *>()); }
    | BODY BODY_ENTITY { $1->entities.push_back($2); $$ = $1; }
    ;
BODY_ENTITY:
    LOCAL_VAR_DECL { $$ = $1; }
    | STATEMENT { $$ = $1; }
    ;
LOCAL_VAR_DECL:
    TK_VAR TK_IDENTIFIER TK_COLON TYPE TK_IS EXPR TK_SEMICOLON { $$ = new ast::LocalVarDecl($2, $4, $6); }
    | TK_VAR TK_IDENTIFIER TK_IS EXPR TK_SEMICOLON { $$ = new ast::LocalVarDecl($2, nullptr, $4); }
    | TK_VAR TK_IDENTIFIER TK_COLON TYPE TK_SEMICOLON { $$ = new ast::LocalVarDecl($2, $4, nullptr); }
    ;
GLOBAL_VAR_DECL:
    TK_VAR TK_IDENTIFIER TK_COLON TYPE TK_IS EXPR TK_SEMICOLON { $$ = new ast::GlobalVarDecl($2, $4, $6); }
    | TK_VAR TK_IDENTIFIER TK_IS EXPR TK_SEMICOLON { $$ = new ast::GlobalVarDecl($2, nullptr, $4); }
    | TK_VAR TK_IDENTIFIER TK_COLON TYPE TK_SEMICOLON { $$ = new ast::GlobalVarDecl($2, $4, nullptr); }
    ;
STATEMENT:
    ASSIGNMENT { $$ = $1; }
    | PRINT { $$ = $1; }
    | IF { $$ = $1; }
    | WHILE_LOOP { $$ = $1; }
    | FOR_LOOP { $$ = $1; }
    | ROUTINE_CALL { $$ = $1;}
    | RETURN { $$ = $1; }
    ; 
ASSIGNMENT:
    VAR TK_ASSIGN EXPR TK_SEMICOLON { $$ = new ast::Assignment($1, $3); };
ROUTINE_CALL:
    TK_IDENTIFIER TK_LPAREN EXPR_LIST TK_RPAREN TK_SEMICOLON { $$ = new ast::RoutineCall($1, $3); }
    | TK_IDENTIFIER TK_LPAREN TK_RPAREN TK_SEMICOLON { $$ = new ast::RoutineCall($1, nullptr); };
PRINT:
    TK_PRINT TK_LPAREN EXPR TK_RPAREN TK_SEMICOLON{ $$ = new ast::Print($3); }
    ; 
IF:
    TK_IF EXPR TK_THEN BODY TK_END { $$ = new ast::If($2, $4, nullptr); }
    | TK_IF EXPR TK_THEN BODY TK_ELSE BODY TK_END {$$ = new ast::If($2, $4, $6); }
    ;
WHILE_LOOP:
    TK_WHILE EXPR TK_LOOP BODY TK_END {$$ = new ast::WhileLoop($2, $4); }
    ;
FOR_LOOP:
    TK_FOR TK_IDENTIFIER TK_IN RANGE TK_LOOP BODY TK_END{ $$ = new ast::ForLoop($2, $4, $6); }
    ;
RANGE:
    EXPR TK_DDOT EXPR { $$ = new ast::Range($1, $3, false); }
    | TK_REVERSE EXPR TK_DDOT EXPR { $$ = new ast::Range($2, $4, true); }
    ;
RETURN: 
    TK_RETURN EXPR TK_SEMICOLON { $$ = new ast::Return($2); }
    ; 
TYPE_DECL:
    TK_TYPE TYPE_IDENTIFIER TK_IS TYPE TK_SEMICOLON { $$ = new ast::TypeDecl($2, $4); }
    ;
TYPE:
    PRIMITIVE_TYPE { $$ = $1; }
    | USER_TYPE { $$ = $1; }
    | TYPE_IDENTIFIER { $$ = $1;} 
    ;
PRIMITIVE_TYPE:
    TK_INTEGER { $$ = new ast::IntegerType(); }
    | TK_REAL { $$ = new ast::RealType(); }
    | TK_BOOLEAN { $$ = new ast::BooleanType(); }
    ;
USER_TYPE:
    ARRAY_TYPE { $$ = $1; }
    | RECORD_TYPE { $$ = $1; }
    ;
TYPE_IDENTIFIER:
    TK_IDENTIFIER { $$ = new ast::TypeIdentifier($1); }
    ;
ARRAY_TYPE:
    TK_ARRAY TK_LSQUARE EXPR TK_RSQUARE TYPE  { $$ = new ast::ArrayType($5, $3); }
    ;
RECORD_TYPE:
    TK_RECORD LOCAL_VAR_LIST TK_END { $$ = new ast::RecordType($2); }
    ;
LOCAL_VAR_LIST: 
    LOCAL_VAR_DECL{ $$ = new ast::LocalVarList(std::vector<ast::LocalVarDecl *>()); $$->vars.push_back($1); }
    | LOCAL_VAR_LIST LOCAL_VAR_DECL { $1->vars.push_back($2); $$ = $1; } 
    ;
EXPR: 
    VALUE { $$ = $1; }
    | BINARY { $$ = $1; }
    | TK_LPAREN BINARY TK_RPAREN { $$ = $2; }
    | LOGIC { $$ = $1; }
    | TK_LPAREN LOGIC TK_RPAREN { $$ = $2; }
    | COMPARISON { $$ = $1; }
    | TK_LPAREN COMPARISON TK_RPAREN { $$ = $2; }
    ;
BINARY:
    EXPR TK_PLUS EXPR { $$ = new ast::BinaryExpr(BinaryOperator::Plus, $1, $3); }
    | EXPR TK_MINUS EXPR { $$ = new ast::BinaryExpr(BinaryOperator::Minus, $1, $3); }
    | EXPR TK_MUL EXPR { $$ = new ast::BinaryExpr(BinaryOperator::Mul, $1, $3); }
    | EXPR TK_DIV EXPR { $$ = new ast::BinaryExpr(BinaryOperator::Div, $1, $3); }
    | EXPR TK_MOD EXPR { $$ = new ast::BinaryExpr(BinaryOperator::Mod, $1, $3); }
    ;
LOGIC:
    EXPR TK_AND EXPR { $$ = new ast::LogicExpr(LogicOperator::And, $1, $3); }
    | EXPR TK_OR EXPR { $$ = new ast::LogicExpr(LogicOperator::Or, $1, $3); }
    | EXPR TK_XOR EXPR { $$ = new ast::LogicExpr(LogicOperator::Xor, $1, $3); }
    ;
COMPARISON:
    EXPR TK_EQ EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::Equal, $1, $3); }
    | EXPR TK_NEQ EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::NotEqual, $1, $3); }
    | EXPR TK_GEQ EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::GreaterEqual, $1, $3); }
    | EXPR TK_GT EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::Greater, $1, $3); }
    | EXPR TK_LT EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::Less, $1, $3); }
    | EXPR TK_LEQ EXPR { $$ = new ast::ComparisonExpr(ComparisonOperator::LessEqual, $1, $3); }
    ;
VALUE:
    TK_BOOLEAN_LITERAL { $$ = new ast::BooleanValue($1);  }
    | TK_INTEGER_LITERAL { $$ = new ast::IntegerValue($1); }
    | TK_REAL_LITERAL { $$ = new ast::RealValue($1); }
    | VAR { $$ = $1; }
    | ROUTINE_CALL_VALUE { $$ = $1;} 
    ;
ROUTINE_CALL_VALUE:
    TK_IDENTIFIER TK_LPAREN EXPR_LIST TK_RPAREN { $$ = new ast::RoutineCallValue($1, $3); }
    | TK_IDENTIFIER TK_LPAREN TK_RPAREN { $$ = new ast::RoutineCallValue($1, nullptr); }
    ;
EXPR_LIST: 
    EXPR { $$ =  new ast::ExprList(std::vector<ast::Expr *>()); $$->exprs.push_back($1);}
    | EXPR_LIST TK_COMMA EXPR { $1->exprs.push_back($3); $$ = $1; }
    ; 
VAR: 
    TK_IDENTIFIER NESTED_ACCESS_LIST{ $$ = new ast::Var($1, $2); }
    ;
NESTED_ACCESS_LIST: 
    %empty { $$ = new ast::NestedAccessList(std::vector<ast::NestedAccess*> ()); }
    | NESTED_ACCESS_LIST RECORD_ACCESS { $1->accesses.push_back($2); $$ = $1; }
    | NESTED_ACCESS_LIST ARRAY_ACCESS { $1->accesses.push_back($2); $$ = $1; }
    ;
RECORD_ACCESS:
    TK_DOT TK_IDENTIFIER { $$ = new ast::RecordAccess($2); }
    ;
ARRAY_ACCESS:
    TK_LSQUARE EXPR TK_RSQUARE { $$ = new ast::ArrayAccess($2); }
    ;
%%


extern int lineno;
void carbonic_c::Parser::error(const std::string& msg) {
    std::cout << msg<<"\nLine number: "<<lineno;
    exit(1);
}

